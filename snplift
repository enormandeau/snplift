#!/bin/bash
# Run the full pipeline

# Global variables
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
#SCRIPT=$0
#SCRIPT_NAME="$(basename "$SCRIPT")"
CONFIG_FILE=$1
#CONFIG_FILENAME=$(basename "$CONFIG_FILE")
LOG_FOLDER="99_logfiles"
#RESULT_FOLDER="12_results"

# Source config file
source "$CONFIG_FILE"

# TODO
## Import configfile and keep copy in 00_archive/log_files
#if [ -e "$CONFIG_FILE" -a -s "$CONFIG_FILE" ]
#then
#    source "$CONFIG_FILE"
#    cp "$CONFIG_FILE" "$LOG_FOLDER"/"$TIMESTAMP"_"$CONFIG_FILENAME"
#    cp "$PRIMER_FILE" "$LOG_FOLDER"/"$TIMESTAMP"_$(basename "$PRIMER_FILE")

#else
#    echo -e "\nBARQUE: Config file does not exist or is empty."
#    echo -e "        Please specify a valid config file."
#    exit 1
#fi

## Validate that database and samples are present
#if ! ./01_scripts/00_validate_project.sh
#then
#    exit 1
#fi

# Log all output
exec > >(tee "$LOG_FOLDER"/"$TIMESTAMP"_barque_run.log) 2>&1

# Printing version and name
echo -e "\n$(head -1 README.md | cut -c 3-)"

# Check collinearity
#echo "SNPLift: Assessing collinearity of the two genomes with minimap2"
#./05_collinearity/01_collinearity.sh "$NEW_GENOME" "$OLD_GENOME"

# SNPLift
## Index new genome if needed
#echo -e "\nSNPLift: Indexing new genome with bwa index\n"
#bwa index "$NEW_GENOME"

## Get original coordinates
echo -e "\nSNPLift: Extracting positions from old VCF"
./01_scripts/01_extract_positions.sh "$OLD_VCF" positions.ids

## Extract flanking sequences around SNPs (100bp on each side)
echo -e "\nSNPLift: Extracting flanking sequences around SNPs in old genome"
./01_scripts/02_fasta_extract_flanking_regions.py "$OLD_GENOME" positions.ids "$WINDOW_LENGTH" positions.fasta

## Map reads with bwa (keep best hit)
echo -e "\nSNPLift: Mapping flanking sequences on new genome with bwa\n"
./01_scripts/03_map_reads.sh "$NEW_GENOME" positions.fasta

## Extract features from alignments
echo -e "\nSNPLift: Extract features from alignments"
./01_scripts/04_extract_features_from_alignments.py positions.sam "$WINDOW_LENGTH" positions.features

## Visualize features
echo -e "\nSNPLift: Visualize features\n"
R -q -e 'source("./01_scripts/05_explore_features.R")' 2>/dev/null

## Score markers based on alignments (detail them)
echo -e "\nSNPLift: Score markers based on extracted features"
./01_scripts/06_score_markers.py positions.features positions.scores

## Keep good loci and try to recuperate bad alignments if locally collinear
echo -e "\nSNPLift: Getting coordinates of transferable SNPs"
./01_scripts/07_correspondence.py positions.scores "$NUM_NEIGHBOURS" positions.corr

## Update VCF
echo -e "\nNPLift: Writing new VCF with updated coordinates"
./01_scripts/08_replace_coordinates_in_vcf.py "$OLD_VCF" positions.corr "$NEW_VCF"

## Run stats
echo -e "\nSNPLift: Number of SNPs at each step\n"
ls "$OLD_VCF" -1tr positions.* "$NEW_VCF" | grep -v fasta | grep -v png | parallel -k wc -l
echo
echo "SNPLift: Percentage of SNPs transfered:"
echo $(echo '100 *' $(wc -l positions.corr | awk '{print $1}') / $(wc -l positions.ids | awk '{print $1}') | bc -ql | cut -c -5)"%"

echo -e "\nSNPLift: Run completed\n"
