#!/bin/bash
# Run the full pipeline

# Global variables
CONFIG=$1
NCPUS_CLI=$2

LOG_FOLDER="99_logfiles"
LIFTOVER_FOLDER="06_liftover"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

CONFIG_FILENAME=$(basename "$CONFIG")

cp "$CONFIG" "$LOG_FOLDER"/"$TIMESTAMP"_"$CONFIG_FILENAME"

# Source config file
source "$CONFIG"

# Check if we override NCPUS
if [[ -n "$NCPUS_CLI" ]]
then
    export NCPUS=$NCPUS_CLI
fi

# Log all output
exec > >(tee "$LOG_FOLDER"/"$TIMESTAMP"_SNPlift.log) 2>&1

# Printing version and name
echo -e "\n$(head -1 README.md | cut -c 3-)"
echo -e "\nSNPLift: Using $NCPUS CPUs"
echo "Start: $(date +%Y%m%d_%H%M%S)"

# Check collinearity
if [ "$CHECK_COLLINEARITY" == "0" ]
then
    echo -e "\nSNPLift: Skipping collinearity assessment"

elif [ "$CHECK_COLLINEARITY" == "1" ]
then
    echo -e "\nSNPLift: Assessing collinearity of the genomes\n"
    ./01_scripts/util/collinearity.sh "$NEW_GENOME" "$OLD_GENOME" "$NCPUS"

else
    echo -e "\nParameter error: Invalid value in config file for CHECK_COLLINEARITY"
    echo "  Must be 0 (zero) or 1 (one)"
    exit
fi

# Index new genome if needed
if [ "$SKIP_INDEXING" == "0" ]
then
    echo -e "\nSNPLift: Indexing new genome\n"
    bwa index "$NEW_GENOME"

elif [ "$SKIP_INDEXING" == "1" ]
then
    echo -e "\nSNPLift: Skipping genome indexing"
    echo "> NOTE: Use only if the genome is already indexed with 'bwa index'"

else
    echo -e "\nParameter error: Invalid value in config file for SKIP_INDEXING"
    echo "  Must be 0 (zero) or 1 (one)"
    exit
fi

# SNPLift
## Cleanup LIFTOVER_FOLDER
rm "$LIFTOVER_FOLDER"/* 2>/dev/null

## Get original coordinates
echo -e "\nSNPLift: Extracting positions from input file"
export NUM_LINES=$(grep -vc "^#" "$INPUT_FILE")
./01_scripts/01_extract_positions.sh "$INPUT_FILE" "$NUM_LINES" "$NCPUS" "$NUM_NEIGHBOURS"

## Extract flanking sequences around SNPs (100bp on each side)
echo -e "\nSNPLift: Extracting flanking sequences around SNPs"
parallel -j "$NCPUS" ./01_scripts/02_fasta_extract_flanking_regions.py "$OLD_GENOME" {} \
    "$WINDOW_LENGTH" {.}.fasta ::: \
    "$LIFTOVER_FOLDER"/positions.*.ids

## Map reads with bwa (keep best hit)
echo -e "\nSNPLift: Mapping flanking sequences on new genome\n"
parallel -j 1 ./01_scripts/03_map_reads.sh "$NEW_GENOME" {} "$NCPUS" \> {.}.sam ::: \
    "$LIFTOVER_FOLDER"/positions.*.fasta

## Extract features from alignments
echo -e "\nSNPLift: Extract features from alignments"
parallel -j "$NCPUS" ./01_scripts/04_extract_features_from_alignments.py {} "$WINDOW_LENGTH" \
    {.}.features ::: "$LIFTOVER_FOLDER"/positions.*.sam

## Visualize features if requested

if [ "$SKIP_VISUALIZATION" == "0" ]
then
    echo -e "\nSNPLift: Visualize features\n"
    cat "$LIFTOVER_FOLDER"/positions.*.features | head -1 > "$LIFTOVER_FOLDER"/header.temp
    cat "$LIFTOVER_FOLDER"/positions.*.features | grep -v "QueryName" > "$LIFTOVER_FOLDER"/body.temp
    cat "$LIFTOVER_FOLDER"/{header.temp,body.temp} > "$LIFTOVER_FOLDER"/positions.features
    rm "$LIFTOVER_FOLDER"/*.temp

    R -q -e 'source("./01_scripts/05_explore_features.R")' #2>/dev/null

elif [ "$SKIP_VISUALIZATION" == "1" ]
then
    echo -e "\nSNPLift: Skipping visualization"

else
    echo -e "\nParameter error: Invalid value in config file for SKIP_VISUALIZATION"
    echo "  Must be 0 (zero) or 1 (one)"
    exit
fi

## Score markers based on alignments (detail them)
echo -e "\nSNPLift: Score markers based on extracted features"
parallel -j "$NCPUS" ./01_scripts/06_score_markers.py {} {.}.scores "$WINDOW_LENGTH" ::: \
    "$LIFTOVER_FOLDER"/positions.*.features

## Keep good loci and try to recuperate bad alignments if locally collinear
echo -e "\nSNPLift: Getting coordinates of transferable SNPs"
parallel -j "$NCPUS" ./01_scripts/07_correspondence.py {} "$NUM_NEIGHBOURS" {.}.corr "$NCPUS" ::: \
    "$LIFTOVER_FOLDER"/positions.*.scores

cat "$LIFTOVER_FOLDER"/positions.*.corr > positions_correspondence.tsv

## Update coordinates
echo -e "\nSNPLift: Writing output file with updated coordinates"
./01_scripts/08_replace_coordinates_in_vcf.py "$INPUT_FILE" positions_correspondence.tsv "$OUTPUT_FILE"

## Report number of SNPs for each step
echo -e "\nSNPLift: Number of SNPs treated at each step\n"
echo -e $(cat "$LIFTOVER_FOLDER"/positions.*.ids | ./01_scripts/util/count_unique_lines.py)"\tPositions"
#echo -e $(cat "$LIFTOVER_FOLDER"/positions.*.sam | grep -v "^@" | cut -f 1 | ./01_scripts/util/count_unique_lines.py)"\tAlignments"
echo -e $(cat "$LIFTOVER_FOLDER"/positions.*.features | grep -v "^@" | cut -f 1 | ./01_scripts/util/count_unique_lines.py)"\tFeatures"
echo -e $(cat "$LIFTOVER_FOLDER"/positions.*.scores | ./01_scripts/util/count_unique_lines.py)"\tScores"
echo -e $(cat "$LIFTOVER_FOLDER"/positions.*.corr | ./01_scripts/util/count_unique_lines.py)"\tTransferable"

## Report percentage of transfered SNPs
echo
echo "SNPLift: Percentage of transferred SNPs:"
echo $(echo '100 *' $(cat "$LIFTOVER_FOLDER"/positions.*.corr | ./01_scripts/util/count_unique_lines.py) / $(cat "$LIFTOVER_FOLDER"/positions.*.ids | ./01_scripts/util/count_unique_lines.py) | bc -ql | cut -c -7)"%"

echo -e "\nSNPLift: Run completed\n"
echo "End: $(date +%Y%m%d_%H%M%S)"
